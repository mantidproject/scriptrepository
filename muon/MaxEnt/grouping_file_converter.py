"""
Simple script to be used for converting old-style MaxEnt grouping files to a
format that Mantid's MaxEnt algorithm can understand.

Old-style files are of the following format:

Lines   | Content
--------+--------
1 - 5   | Misc. info ignored by this script.
6 - End | Pairs of integers seperated by whitespace, mapping detector number to
        | group number.

Usage:

Change INST, INPUT_FILE_PATH and OUTPUT_FILE_PATH to taste, then run.
"""

from collections import defaultdict

INST = "INST"
INPUT_FILE_PATH = "STDGRP.PAR"
                   # Recommended default format:
OUTPUT_FILE_PATH = INST + "_Detector_Grouping_MaxEnt.xml"

FILE_FORMAT = """<!-- Generated by %s. -->
<?xml version="1.0" encoding="UTF-8" ?>
<detector-grouping instrument="%s\" description="%s">%s
</detector-grouping>
"""
GROUP_LINE = "    <group name=\"%s\"> <ids val=\"%s\"/> </group>"

def convert_grouping_file(path, inst, description=None):
    """
    Given the file path to an "old-style" grouping file (*.PAR) and the name
    of an instrument, this function will read in the file and convert its
    contents to a format that Mantid's MaxEnt can understand.
    """
    with open(path, "r") as old_style_file:
        content = old_style_file.readlines()

        groupings = defaultdict(set)

        for line in [line.strip().split(" ") for line in content[5:]]:
            try:
                detector, group = int(line[0]), int(line[1])
                # Ignore detectors grouped to zero.
                if group == 0:
                    continue
            except:
                continue
            groupings[group].add(detector)

        groupings_str = ""
        for group, detectors in list(groupings.items()):

            groupings_str += "\n"
            groupings_str += GROUP_LINE % (str(group), 
                                           str(",".join(map(str,sorted(list(detectors))))))

        if description == None:
            n_groups = sum([len(dets) for dets in list(groupings.values())])
            description = "%s Grouping File for MaxEnt (%d Detectors)" % (inst, n_groups)

        return FILE_FORMAT % (__file__, inst, description, groupings_str)

if __name__ == "__main__":
    grouping_info = convert_grouping_file(INPUT_FILE_PATH, INST)

    with open(OUTPUT_FILE_PATH, "w") as output_file:
        output_file.write(grouping_info)